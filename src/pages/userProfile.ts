import { ActionReducerMapBuilder, createAsyncThunk, createSlice, PayloadAction, Slice } from "@reduxjs/toolkit";
import { RootState } from "../redux/store";
import { BACKEND, getAbsoluteRoute } from "../util/Routes";
import { wrapFetch, wrapResponse } from "../util/helpers";

export interface UserProfileState {
  projectId?: string;
  status: ProfileStatus;
  username?: string;
  email: string;
  initials?: string;
  user?: string; // Added user property
  joinedDate: string;
}

export enum ProfileStatus {
  idle = "idle",
  loading = "loading",
  failed = "failed",
  initial = "initial",
}

const initialState: UserProfileState = {
  status: ProfileStatus.initial,
  initials: "",
  email: "", // Provide a default empty string for email
  joinedDate: "", // Provide a default empty string for joinedDate
};

export const loadUserProfile = createAsyncThunk("user/fetchProfile", async (_, { rejectWithValue }) => {
  try {
    const userProfile = await getUserProfile(rejectWithValue);
    return {
      ...userProfile,
      initials: getInitialsFromUser(userProfile.user), // Use the updated function
    };
  } catch (error) {
    return rejectWithValue(error);
  }
});

export const getUserProfile = async (rejectWithValue: any): Promise<UserProfileState> => {
  const response: Response = await wrapFetch(getAbsoluteRoute(BACKEND.USER_PROFILE));
  const data = await wrapResponse(response, rejectWithValue);

  console.log("User profile fetched from backend:", data); // Debugging log
  localStorage.setItem('userId', data.userID); // Store the userId in localStorage
  return data;
};

export const userprofileSlice: Slice<UserProfileState, {}, "userprofile"> = createSlice({
  name: "userprofile",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder: ActionReducerMapBuilder<UserProfileState>) => {
    builder
      .addCase(loadUserProfile.pending, (state: UserProfileState) => {
        state.status = ProfileStatus.loading;
      })
      .addCase(loadUserProfile.fulfilled, (state: UserProfileState, action: PayloadAction<UserProfileState>) => {
        state.projectId = action.payload.projectId;
        state.username = action.payload.username;
        state.email = action.payload.email;
        state.user = action.payload.user; // Ensure user is set
        state.initials = getInitialsFromUser(action.payload.user); // Set initials from user
        state.status = ProfileStatus.idle;
      })
      .addCase(loadUserProfile.rejected, (state: UserProfileState) => {
        state.projectId = undefined;
        state.status = ProfileStatus.failed;
      });
  },
});

export const getInitialsFromUser = (user: string | undefined): string => {
  const fallbackInitials = "AP"; // Fallback value
  if (!user) {
    return fallbackInitials;
  }

  // Split the user string by spaces to extract the first name
  const firstName = user.split(" ")[0];

  // Capitalize the first letter of the first name
  return firstName.charAt(0).toUpperCase() + firstName.slice(1).toLowerCase();
};

export const selectUserProfile = (state: RootState): UserProfileState => state.userprofile;

export default userprofileSlice.reducer;