// Code generated by MockGen. DO NOT EDIT.
// Source: presenter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	firestore "github.tools.aya/aya/decisionCLI/pkg/firestore"
)

// MockPolicyList is a mock of PolicyList interface.
type MockPolicyList struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyListMockRecorder
}

// MockPolicyListMockRecorder is the mock recorder for MockPolicyList.
type MockPolicyListMockRecorder struct {
	mock *MockPolicyList
}

// NewMockPolicyList creates a new mock instance.
func NewMockPolicyList(ctrl *gomock.Controller) *MockPolicyList {
	mock := &MockPolicyList{ctrl: ctrl}
	mock.recorder = &MockPolicyListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyList) EXPECT() *MockPolicyListMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPolicyList) Get(ctx context.Context, policyListID string) (firestore.PolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, policyListID)
	ret0, _ := ret[0].(firestore.PolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyListMockRecorder) Get(ctx, policyListID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPolicyList)(nil).Get), ctx, policyListID)
}
