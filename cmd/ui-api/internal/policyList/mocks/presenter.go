// Code generated by MockGen. DO NOT EDIT.
// Source: presenter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decision "github.tools.aya/aya/decisionCLI/cmd/ui-api/internal/policyList"
	firestore "github.tools.aya/aya/decisionCLI/pkg/firestore"
)

// MockPolicyStorage is a mock of PolicyStorage interface.
type MockPolicyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyStorageMockRecorder
}

// Login implements decision.PolicyStorage.
func (m *MockPolicyStorage) Login(ctx context.Context, username string, password string) error {
	panic("unimplemented")
}

// Register implements decision.PolicyStorage.
func (m *MockPolicyStorage) Register(ctx context.Context, user decision.User) error {
	panic("unimplemented")
}

// CreatePolicyInMongo implements decision.PolicyStorage.
func (m *MockPolicyStorage) CreatePolicyInMongo(ctx context.Context, policyList firestore.PolicyList) error {
	panic("unimplemented")
}

// DeletePolicyInMongo implements decision.PolicyStorage.
func (m *MockPolicyStorage) DeletePolicyInMongo(ctx context.Context, policyListID string) error {
	panic("unimplemented")
}

// GetPoliciesFromMongo implements decision.PolicyStorage.
func (m *MockPolicyStorage) GetPoliciesFromMongo(ctx context.Context) ([]firestore.PolicyList, error) {
	panic("unimplemented")
}

// UpdatePolicyInMongo implements decision.PolicyStorage.
func (m *MockPolicyStorage) UpdatePolicyInMongo(ctx context.Context, policyListID string, policyList firestore.PolicyList) error {
	panic("unimplemented")
}

// MockPolicyStorageMockRecorder is the mock recorder for MockPolicyStorage.
type MockPolicyStorageMockRecorder struct {
	mock *MockPolicyStorage
}

// NewMockPolicyStorage creates a new mock instance.
func NewMockPolicyStorage(ctrl *gomock.Controller) *MockPolicyStorage {
	mock := &MockPolicyStorage{ctrl: ctrl}
	mock.recorder = &MockPolicyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyStorage) EXPECT() *MockPolicyStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicyStorage) Create(ctx context.Context, policyList firestore.PolicyList) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, policyList)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPolicyStorageMockRecorder) Create(ctx, policyList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicyStorage)(nil).Create), ctx, policyList)
}

// Delete mocks base method.
func (m *MockPolicyStorage) Delete(ctx context.Context, policyListID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, policyListID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicyStorageMockRecorder) Delete(ctx, policyListID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicyStorage)(nil).Delete), ctx, policyListID)
}

// GetAll mocks base method.
func (m *MockPolicyStorage) GetAll(ctx context.Context, policyListType string) ([]firestore.PolicyList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, policyListType)
	ret0, _ := ret[0].([]firestore.PolicyList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPolicyStorageMockRecorder) GetAll(ctx, policyListType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPolicyStorage)(nil).GetAll), ctx, policyListType)
}

// Update mocks base method.
func (m *MockPolicyStorage) Update(ctx context.Context, policyListID string, policyList firestore.PolicyList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, policyListID, policyList)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPolicyStorageMockRecorder) Update(ctx, policyListID, policyList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicyStorage)(nil).Update), ctx, policyListID, policyList)
}
